=== puma startup: 2018-08-25 01:40:21 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38789, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "TN.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Race <- TU$V4
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Race, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_race.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res <- summary(km)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
save.df <- as.data.frame(res[c("strata", "time", "n.risk", "n.event", "surv", "s td.err", "lower", "upper")])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(save.df, "public/KM_data.csv")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_stage.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Race <- TU$V4
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Race, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_race.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TU$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TU[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TU,y=TU,x=TU$V2, mode = "marker",type= "scatter",
         showlegend = TRUE,
         hoverinfo = "text+x",
         text = ~TU$V1,
         marker = list(opacity = 1,
                       color = TU$cluster,
                       size = 12,
                       line = list(color = "#262626", width = 1)))%>%
 
   layout(hovermode = "closest",
          showlegend = F,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = "",
          title = paste("Kmeans Clustering for",TU$V3[1], "Univariate cluster al gorithm found",k, "optimal clusters"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
 
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(a), "kmeans_cluster.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TPM,color = ~Stage, type = 'box') %>% layout(hovermode = ' closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',title=sprintf('Expression Levels of %s by Stage.
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
           
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'Stage',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "stage.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TPM,color = ~Stage, type = 'box') %>% layout(hovermode = ' closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',title=sprintf('Expression Levels of %s by Stage.
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
           
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'Stage',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "stage.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox <- coxph(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox_fit <- survfit(cox)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
saveWidgetFix <- function (widget,file,...) {
  ## A wrapper to saveWidget which compensates for arguable BUG in
  ## saveWidget which requires `file` to be in current working
  ## directory.
  wd<-getwd()
  on.exit(setwd(wd))
  outDir<-dirname(file)
  file<-basename(file)
  setwd(outDir);
  saveWidget(widget,file=file,...)
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <-survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin) [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <-ggsurv1(cox_fit,  main = paste("Cox Hazards Regression for",names1)) +  them e_bw() + ggplot2::geom_text(aes(label = sprintf("log-rank test p-value: %0.2g",p chisq(log_rank$chisq, df = 1, lower.tail = F)),x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
o <-plotly::ggplotly(z)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(o), "coxph.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "TN.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Race <- TU$V4
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Race, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_race.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TU$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TU[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TU,y=TU,x=TU$V2, mode = "marker",type= "scatter",
         showlegend = TRUE,
         hoverinfo = "text+x",
         text = ~TU$V1,
         marker = list(opacity = 1,
                       color = TU$cluster,
                       size = 12,
                       line = list(color = "#262626", width = 1)))%>%
 
   layout(hovermode = "closest",
          showlegend = F,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = "",
          title = paste("Kmeans Clustering for",TU$V3[1], "Univariate cluster al gorithm found",k, "optimal clusters"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
 
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(a), "kmeans_cluster.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TPM,color = ~Stage, type = 'box') %>% layout(hovermode = ' closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',title=sprintf('Expression Levels of %s by Stage.
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
           
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'Stage',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "stage.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "TN.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 06:48:33 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38521, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 06:51:19 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 39256, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 06:56:29 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38923, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TU$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TU[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TU,y=TU,x=TU$V2, mode = "marker",type= "scatter",
         showlegend = TRUE,
         hoverinfo = "text+x",
         text = ~TU$V1,
         marker = list(opacity = 1,
                       color = TU$cluster,
                       size = 12,
                       line = list(color = "#262626", width = 1)))%>%
 
   layout(hovermode = "closest",
          showlegend = F,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = "",
          title = paste("Kmeans Clustering for",TU$V3[1], "Univariate cluster al gorithm found",k, "optimal clusters"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
 
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(a), "kmeans_cluster.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 07:01:00 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38447, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V4)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TU$V2 ~ TU$V4, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V4, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s by race 
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Race',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            gridcolor = 'rgb(255, 255, 255)',
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "race.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Race <- TU$V4
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Race, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_race.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox <- coxph(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox_fit <- survfit(cox)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
saveWidgetFix <- function (widget,file,...) {
  ## A wrapper to saveWidget which compensates for arguable BUG in
  ## saveWidget which requires `file` to be in current working
  ## directory.
  wd<-getwd()
  on.exit(setwd(wd))
  outDir<-dirname(file)
  file<-basename(file)
  setwd(outDir);
  saveWidget(widget,file=file,...)
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <-survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin) [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <-ggsurv1(cox_fit,  main = paste("Cox Hazards Regression for",names1)) +  them e_bw() + ggplot2::geom_text(aes(label = sprintf("log-rank test p-value: %0.2g",p chisq(log_rank$chisq, df = 1, lower.tail = F)),x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
o <-plotly::ggplotly(z)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(o), "coxph.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TPM,color = ~Stage, type = 'box') %>% layout(hovermode = ' closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',title=sprintf('Expression Levels of %s by Stage.
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
           
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'Stage',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "stage.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 07:09:05 +0000 ===
! Unable to load application: SyntaxError: /home/deploy/apps/diffexdb/releases/20180825013948/app/controllers/abundances_controller.rb:999: syntax error, unexpected keyword_end, expecting end-of-input
=== puma startup: 2019-01-15 07:09:33 +0000 ===
=== puma startup: 2019-01-15 07:09:33 +0000 ===
! Unable to load application: SyntaxError: /home/deploy/apps/diffexdb/releases/20180825013948/app/controllers/abundances_controller.rb:999: syntax error, unexpected keyword_end, expecting end-of-input
bundler: failed to load command: puma (/home/deploy/apps/diffexdb/shared/bundle/ruby/2.3.0/bin/puma)
=== puma startup: 2019-01-15 07:12:43 +0000 ===
=== puma startup: 2019-01-15 07:12:43 +0000 ===
* Listening on unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38897, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V11 %like% '-1$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V12, TUfin$V11) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TUfin,x=TUfin$V2, mode = "marker",type= "scatter",
        showlegend = FALSE,
        hoverinfo = "text+x",
        text = ~TUfin$V1,
        marker = list(opacity = 1,
                      color = TUfin$cluster,
                      size = 12,
                      line = list(color = "#262626", width = 1)))%>%

  layout(hovermode = "closest",
         showlegend = F,
         margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
         paper_bgcolor = "",
         title = paste("Kmeans Clustering for",TUfin$V3[1], "Univariate cluster  algorithm found",k, "optimal clusters"),
         titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "TPM",
           titlefont = list(color = "rgb(2, 0, 1)")),

         yaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "Sample Number",
           titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V7, TUfin$V6) ~ TUfin$cluster, data=TU fin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv(km, main = "Test") + theme_bw() +  ggplot2::geom_text(aes(label = sp rintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <- subplot(a,tr)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),paper_bgcolor =  "",title = paste("Kmeans Clustering & Kaplan Meier Curve for ",TUfin$V3[1],".\n ", "Cluster medians", 
          format(round(min(result$centers), 2), nsmall = 2),"&",format(round(max (result$centers), 2), nsmall = 2),"TPM"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")),xaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "time",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Survival",
            titlefont = list(color = "rgb(2, 0, 1)")),showlegend=FALSE)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res <- summary(km)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
save.df <- as.data.frame(res[c("strata", "time", "n.risk", "n.event", "surv", "s td.err", "lower", "upper")])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(save.df, "KM_data.csv")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 07:17:12 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 39307, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V11 %like% '-1$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V12, TUfin$V11) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TUfin,x=TUfin$V2, mode = "marker",type= "scatter",
        showlegend = FALSE,
        hoverinfo = "text+x",
        text = ~TUfin$V1,
        marker = list(opacity = 1,
                      color = TUfin$cluster,
                      size = 12,
                      line = list(color = "#262626", width = 1)))%>%

  layout(hovermode = "closest",
         showlegend = F,
         margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
         paper_bgcolor = "",
         title = paste("Kmeans Clustering for",TUfin$V3[1], "Univariate cluster  algorithm found",k, "optimal clusters"),
         titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "TPM",
           titlefont = list(color = "rgb(2, 0, 1)")),

         yaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "Sample Number",
           titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V7, TUfin$V6) ~ TUfin$cluster, data=TU fin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv(km, main = "Test") + theme_bw() +  ggplot2::geom_text(aes(label = sp rintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <- subplot(a,tr)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),paper_bgcolor =  "",title = paste("Kmeans Clustering & Kaplan Meier Curve for ",TUfin$V3[1],".\n ", "Cluster medians", 
          format(round(min(result$centers), 2), nsmall = 2),"&",format(round(max (result$centers), 2), nsmall = 2),"TPM"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")),xaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "time",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Survival",
            titlefont = list(color = "rgb(2, 0, 1)")),showlegend=FALSE)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res <- summary(km)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
save.df <- as.data.frame(res[c("strata", "time", "n.risk", "n.event", "surv", "s td.err", "lower", "upper")])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(save.df, 'KM_data.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$cluster, data= TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv1(km, main =  paste("Kmeans Clustering & Kaplan Meier Curve for ",TUf in$V3[1],".\n", k, " Optimal Cluster(s) with median(s)", 
          toString(round_df(result$centers,2)),"TPM")) + theme_bw() +  ggplot2:: geom_text(aes(label = sprintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 70, b = 60, l = 60, pad = 1),titlefont = lis t(color = "rgb(2, 0, 1)", size = 22))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(tr), "kaplanmeier.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V11 %like% '-1$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TUfin$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TUfin[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km <-survfit(Surv(TUfin$V12, TUfin$V11) ~ TUfin$cluster, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TUfin,x=TUfin$V2, mode = "marker",type= "scatter",
        showlegend = FALSE,
        hoverinfo = "text+x",
        text = ~TUfin$V1,
        marker = list(opacity = 1,
                      color = TUfin$cluster,
                      size = 12,
                      line = list(color = "#262626", width = 1)))%>%

  layout(hovermode = "closest",
         showlegend = F,
         margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
         paper_bgcolor = "",
         title = paste("Kmeans Clustering for",TUfin$V3[1], "Univariate cluster  algorithm found",k, "optimal clusters"),
         titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "TPM",
           titlefont = list(color = "rgb(2, 0, 1)")),

         yaxis = list(
           gridcolor = "rgb(255, 255, 255)",
           tickfont = list(color = "rgb(255, 255, 255)"),
           title = "Sample Number",
           titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <- survival::survdiff(Surv(TUfin$V7, TUfin$V6) ~ TUfin$cluster, data=TU fin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p1 <-ggsurv(km, main = "Test") + theme_bw() +  ggplot2::geom_text(aes(label = sp rintf("log-rank test p-value: %0.2g", 
                                            pchisq(log_rank$chisq, df = 1, lower .tail = F)),
                          x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
tr <-plotly::ggplotly(p1)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <- subplot(a,tr)%>%
   layout(hovermode = "closest",
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),paper_bgcolor =  "",title = paste("Kmeans Clustering & Kaplan Meier Curve for ",TUfin$V3[1],".\n ", "Cluster medians", 
          format(round(min(result$centers), 2), nsmall = 2),"&",format(round(max (result$centers), 2), nsmall = 2),"TPM"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")),xaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "time",
            titlefont = list(color = "rgb(2, 0, 1)")),
          yaxis2 = list(
            gridcolor = "rgb(2, 0, 1)",
            tickfont = list(color = "rgb(2, 0, 1)"),
            title = "Survival",
            titlefont = list(color = "rgb(2, 0, 1)")),showlegend=FALSE)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res <- summary(km)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
save.df <- as.data.frame(res[c("strata", "time", "n.risk", "n.event", "surv", "s td.err", "lower", "upper")])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(save.df, 'KM_data.csv')
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:03:45 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:14:15 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:15:37 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:24:20 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:49:44 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:54:58 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 19:58:12 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 20:04:41 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-01-15 20:08:48 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:33:27 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:39:31 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:50:30 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:52:44 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:53:49 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 21:57:20 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:00:09 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:05:32 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:24:23 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:28:22 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:46:47 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:48:03 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 22:54:50 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38806, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
N <- dt[mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$V2,N$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(TU$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
j <- plot_ly(TU, y = TU$V2,type = 'box',name = 'Tumor', yaxis = list(type = 'log ')) %>% add_trace(N,y = N$V2, name = 'Normal',yaxis = list(type = 'log')) %>% la yout(title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(j), "tn.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(survival)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggplot2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(dplyr)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(ggfortify)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TUfin <- TU[!TU$V12 %like% '0$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox <- coxph(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
cox_fit <- survfit(cox)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ggsurv1 <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                   cens.col = 'red', lty.est = 1, lty.ci = 2,
                   cens.shape = 3, back.white = F, xlab = 'Time',
                   ylab = 'Survival', main = ''){
 
  library(ggplot2)
  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
 
  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = ''){
 
    dat <- data.frame(time = c(0, s$time),
                      surv = c(1, s$surv),
                      up = c(1, s$upper),
                      low = c(1, s$lower),
                      cens = c(0, s$n.censor))
    dat.cens <- subset(dat, cens != 0)
 
    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
 
    pl <- ggplot(dat, aes(x = time, y = surv)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(col = col, lty = lty.est)
 
    pl <- if(CI == T | CI == 'def') {
      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
        geom_step(aes(y = low), color = col, lty = lty.ci)
    } else (pl)
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                       col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
 
  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
                       cens.col = 'red', lty.est = 1, lty.ci = 2,
                       cens.shape = 3, back.white = F, xlab = 'Time',
                       ylab = 'Survival', main = '') {
    n <- s$strata
 
    groups <- factor(unlist(strsplit(names
                                     (s$strata), '='))[seq(2, 2*strata, by = 2)] )
    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
    gr.df <- vector('list', strata)
    ind <- vector('list', strata)
    n.ind <- c(0,n); n.ind <- cumsum(n.ind)
    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
 
    for(i in 1:strata){
      gr.df[[i]] <- data.frame(
        time = c(0, s$time[ ind[[i]] ]),
        surv = c(1, s$surv[ ind[[i]] ]),
        up = c(1, s$upper[ ind[[i]] ]),
        low = c(1, s$lower[ ind[[i]] ]),
        cens = c(0, s$n.censor[ ind[[i]] ]),
        group = rep(groups[i], n[i] + 1))
    }
 
    dat <- do.call(rbind, gr.df)
    dat.cens <- subset(dat, cens != 0)
 
    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
      xlab(xlab) + ylab(ylab) + ggtitle(main) +
      geom_step(aes(col = group, lty = group))
 
    col <- if(length(surv.col == 1)){
      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
    } else{
      scale_colour_manual(name = gr.name, values = surv.col)
    }
 
    pl <- if(surv.col[1] != 'gg.def'){
      pl + col
    } else {pl + scale_colour_discrete(name = gr.name)}
 
    line <- if(length(lty.est) == 1){
      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
    } else {scale_linetype_manual(name = gr.name, values = lty.est)}
 
    pl <- pl + line
 
    pl <- if(CI == T) {
      if(length(surv.col) > 1 && length(lty.est) > 1){
        stop('Either surv.col or lty.est should be of length 1 in order
             to plot 95% CI with multiple strata')
      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
          geom_step(aes(y = low, color = group), lty = lty.ci)
      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
               geom_step(aes(y = low,lty = group), col = surv.col)}
    } else {pl}
 
 
    pl <- if(plot.cens == T & length(dat.cens) > 0){
      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
                      col = cens.col)
    } else if (plot.cens == T & length(dat.cens) == 0){
      stop ('There are no censored observations')
    } else(pl)
 
    pl <- if(back.white == T) {pl + theme_bw()
    } else (pl)
    pl
  }
  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
                                  cens.col, lty.est, lty.ci,
                                  cens.shape, back.white, xlab,
                                  ylab, main)
  } else {ggsurv.m(s, CI, plot.cens, surv.col ,
                   cens.col, lty.est, lty.ci,
                   cens.shape, back.white, xlab,
                   ylab, main)}
  pl
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
saveWidgetFix <- function (widget,file,...) {
  ## A wrapper to saveWidget which compensates for arguable BUG in
  ## saveWidget which requires `file` to be in current working
  ## directory.
  wd<-getwd()
  on.exit(setwd(wd))
  outDir<-dirname(file)
  file<-basename(file)
  setwd(outDir);
  saveWidget(widget,file=file,...)
}
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
log_rank <-survival::survdiff(Surv(TUfin$V11, TUfin$V12) ~ TUfin$V2, data=TUfin) [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
z <-ggsurv1(cox_fit,  main = paste("Cox Hazards Regression for",names1)) +  them e_bw() + ggplot2::geom_text(aes(label = sprintf("log-rank test p-value: %0.2g",p chisq(log_rank$chisq, df = 1, lower.tail = F)),x = 2000, y = 0.9))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
o <-plotly::ggplotly(z)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(o), "coxph.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(Ckmeans.1d.dp)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
data <- read.table('app/assets/data.csv', header = FALSE, sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(data)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
x <- c(TU$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- as.numeric(unlist(x))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
result <- Ckmeans.1d.dp(TPM)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
k <- max(result$cluster)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dat = TU[,c(2)]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
km1 = kmeans(dat, k)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU$cluster <- km1$cluster
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
a <- plot_ly(TU,y=TU,x=TU$V2, mode = "marker",type= "scatter",
         showlegend = TRUE,
         hoverinfo = "text+x",
         text = ~TU$V1,
         marker = list(opacity = 1,
                       color = TU$cluster,
                       size = 12,
                       line = list(color = "#262626", width = 1)))%>%
 
   layout(hovermode = "closest",
          showlegend = F,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = "",
          title = paste("Kmeans Clustering for",TU$V3[1], "Univariate cluster al gorithm found",k, "optimal clusters"),
          titlefont = list(color = "rgb(2, 0, 1)", size = 20),xaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "TPM",
            titlefont = list(color = "rgb(2, 0, 1)")),
 
          yaxis = list(
            gridcolor = "rgb(255, 255, 255)",
            tickfont = list(color = "rgb(255, 255, 255)"),
            title = "Sample Number",
            titlefont = list(color = "rgb(2, 0, 1)")))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(a), "kmeans_cluster.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!data$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
df <- split(mydata, mydata$V5)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
ttest <- t.test(TU$Dead$V2,TU$Alive$V2)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TU$V2,color = ~TU$V5, type = 'box') %>% layout(hovermode =  'closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',
title=sprintf('Expression Levels of %s 
 P-Value  = %s ',names1,ttest$p.value),titlefont = list(color = 'rgb(2, 0, 1)',  size = 20),xaxis = list(
            
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'Status',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            
            tickfont = list(color = 'rgb(255, 255, 255)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "status.html")
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pvalcomp <- TukeyHSD(res.aov)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TK_data<-as.data.frame(pvalcomp[1:1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
setwd('/home/deploy/apps/diffexdb/current/public')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
write.csv(TK_data, 'anova_stage.csv')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
image_path <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(data.table)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
mydata <- read.table('app/assets/data.csv',sep=',')
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
dt <- as.data.table(mydata)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
names1 <- as.vector(dt$V3[1])
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TU <- dt[!mydata$V1 %like% '-N$']
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
TPM <- TU$V2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
Stage <- TU$V9
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
res.aov <- aov(TPM ~ Stage, data=TU)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
pval <-summary(res.aov)[[1]][["Pr(>F)"]][1]
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(twitteR)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(RColorBrewer)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
library(plotly)
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
p <- plot_ly(TU, y = ~TPM,color = ~Stage, type = 'box') %>% layout(hovermode = ' closest',
          showlegend = T,
          margin = list(r = 20, t = 60, b = 60, l = 60, pad = 1),
          paper_bgcolor = '',title=sprintf('Expression Levels of %s by Stage.
 P-Value  = %s ',names1,pval),titlefont = list(color = 'rgb(2, 0, 1)', size = 20 ),xaxis = list(
           
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'Stage',
            titlefont = list(color = 'rgb(2, 0, 1)')),
 
          yaxis = list(
            tickfont = list(color = 'rgb(2, 0, 1)'),
            title = 'TPM',
            titlefont = list(color = 'rgb(2, 0, 1)')))
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
htmlwidgets::saveWidget(as_widget(p), "stage.html")
print('RINRUBY.EVAL.FLAG')
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 23:11:08 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 23:18:12 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 23:30:42 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-25 23:37:59 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-26 04:57:27 +0000 ====== puma startup: 2019-02-26 04:57:27 +0000 ===

* Listening on unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-26 05:13:05 +0000 ===
=== puma startup: 2019-02-26 05:13:05 +0000 ===
* Listening on unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-26 05:28:24 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-26 05:31:59 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
* Restarting...
Refreshing Gemfile
Puma starting in single mode...
* Version 3.12.0 (ruby 2.3.0-p0), codename: Llamas in Pajamas
* Min threads: 4, max threads: 16
* Environment: production
* Daemonizing...
=== puma startup: 2019-02-26 05:45:02 +0000 ===
* Inherited unix:///home/deploy/apps/diffexdb/shared/tmp/sockets/diffexdb-puma.sock
